<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- setting the TargetFramework directly from the cli via -p:TargetFramework=netA.B does not work using a custom msbuild property seems to work -->
    <MapperlyIntegrationTestsTargetFramework Condition="'$(MapperlyIntegrationTestsTargetFramework)' == ''">net9.0</MapperlyIntegrationTestsTargetFramework>
    <TargetFramework>$(MapperlyIntegrationTestsTargetFramework)</TargetFramework>

    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)/generated</CompilerGeneratedFilesOutputPath>

    <!-- Not supported in .NET Framework -->
    <ImplicitUsings>disable</ImplicitUsings>

    <!-- .NET Framework 4.8 defaults to lang version 7.3, but we want to test nullable features. These are available in 8.0.
          To also use init-only properties, we upgrade to lang version 9.0, which is works, but is not officially supported. -->
    <LangVersion Condition="'$(TargetFramework)' == 'net48'">9.0</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Not supported in .NET Framework -->
    <Using Remove="FluentAssertions"/>
  </ItemGroup>

  <!-- For local development, simply reference the projects. -->
  <ItemGroup Condition="'$(MapperlyNugetPackageVersion)' == ''">
    <ProjectReference Include="..\..\src\Riok.Mapperly\Riok.Mapperly.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\..\src\Riok.Mapperly.Abstractions\Riok.Mapperly.Abstractions.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="true" />
  </ItemGroup>

  <!-- In the CI pipeline, we always want to use a prebuilt nuget package version, since that nuget package will then be distributed -->
  <ItemGroup Condition="'$(MapperlyNugetPackageVersion)' != ''">
    <PackageReference Include="Riok.Mapperly" Version="$(MapperlyNugetPackageVersion)" PrivateAssets="all" />
  </ItemGroup>

  <!-- ef core tests should only run on newer .NET versions -->
  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.2" Condition="'$(TargetFramework)' == 'net7.0'" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.2" Condition="'$(TargetFramework)' == 'net8.0'" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.2" Condition="'$(TargetFramework)' == 'net9.0'" />
  </ItemGroup>

  <!-- diffplex v3 is only compatible with net7.0 up to 2.x-->
  <ItemGroup Condition="'$(TargetFramework)' == 'net7.0' OR '$(TargetFramework)' == 'net6.0'">
    <PackageReference Update="Verify.DiffPlex" Version="2.2.1" />
  </ItemGroup>

  <!-- cannot use source generated polyfills since they require language version 11 -->
  <ItemGroup Condition="'$(TargetFramework)' == 'net48'">
    <PackageReference Include="System.Collections.Immutable" Version="9.0.2" />
    <PackageReference Include="Portable.System.DateTimeOnly" Version="9.0.0" />
    <PackageReference Include="IsExternalInit" Version="1.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
</Project>
