// <auto-generated />
#nullable enable annotations
namespace Riok.Mapperly.IntegrationTests.Mapper
{
    public static partial class UseUserMethodWithRefWithSwitch
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
        public static partial void Merge(global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionBaseType target, global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionBaseType second)
        {
            switch (second, target)
            {
                case (global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionTypeA source, global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionTypeA target1):
                    target1.ValueA = source.ValueA;
                    target1.Id = source.Id;
                    var targetRef = target1.BaseValue;
                    MapIntSum(ref targetRef, source.BaseValue);
                    target1.BaseValue = targetRef;
                    break;
                case (global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionTypeB source, global::Riok.Mapperly.IntegrationTests.Models.TestObjectProjectionTypeB target1):
                    target1.ValueB = source.ValueB;
                    target1.Id = source.Id;
                    var targetRef1 = target1.BaseValue;
                    MapIntSum(ref targetRef1, source.BaseValue);
                    target1.BaseValue = targetRef1;
                    break;
                default:
                    throw new global::System.ArgumentException($"Cannot map {second.GetType()} to {target.GetType()} as there is no known derived type mapping", nameof(second));
            }
        }
    }
}
