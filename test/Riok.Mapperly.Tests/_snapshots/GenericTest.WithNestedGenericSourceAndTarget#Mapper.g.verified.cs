//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::System.Collections.Generic.IEnumerable<TTarget> Map<TSource, TTarget>(global::System.Collections.Generic.IEnumerable<TSource> source)
    {
        return source switch
        {
            global::System.Collections.Generic.IReadOnlyCollection<global::C> x when typeof(global::System.Collections.Generic.IEnumerable<TTarget>).IsAssignableFrom(typeof(global::System.Collections.Generic.List<global::D>)) => (global::System.Collections.Generic.IEnumerable<TTarget>)(object)MapToD(x),
            global::System.Collections.Generic.IEnumerable<global::A> x when typeof(global::System.Collections.Generic.IEnumerable<TTarget>).IsAssignableFrom(typeof(global::System.Collections.Generic.IEnumerable<global::B>)) => (global::System.Collections.Generic.IEnumerable<TTarget>)(object)MapToB(x),
            _ => throw new global::System.ArgumentException($"Cannot map {source.GetType()} to {typeof(global::System.Collections.Generic.IEnumerable<TTarget>)} as there is no known type mapping", nameof(source)),
        };
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::System.Collections.Generic.IEnumerable<global::B> MapToB(global::System.Collections.Generic.IEnumerable<global::A> source)
    {
        return global::System.Linq.Enumerable.Select(source, x => MapToB1(x));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::System.Collections.Generic.List<global::D> MapToD(global::System.Collections.Generic.IReadOnlyCollection<global::C> source)
    {
        var target = new global::System.Collections.Generic.List<global::D>(source.Count);
        foreach (var item in source)
        {
            target.Add(MapToD1(item));
        }
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::B MapToB1(global::A source)
    {
        var target = new global::B();
        target.Value = source.Value;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::D MapToD1(global::C source)
    {
        var target = new global::D(source.Value1);
        return target;
    }
}