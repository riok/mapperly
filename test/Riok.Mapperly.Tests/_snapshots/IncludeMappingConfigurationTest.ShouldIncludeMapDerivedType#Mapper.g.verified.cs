//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::B MapOther(global::A src)
    {
        return src switch
        {
            global::ASubType1 x => MapToBSubType1(x),
            global::ASubType2 x => MapToBSubType2(x),
            _ => throw new global::System.ArgumentException($"Cannot map {src.GetType()} to B as there is no known derived type mapping", nameof(src)),
        };
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial void Map(global::A src, global::B dst)
    {
        switch (src, dst)
        {
            case (global::ASubType1 source, global::BSubType1 target):
                target.Value1 = source.Value1;
                target.BaseValueB = source.BaseValueA;
                break;
            case (global::ASubType2 source, global::BSubType2 target):
                target.Value2 = source.Value2;
                target.BaseValueB = source.BaseValueA;
                break;
            default:
                throw new global::System.ArgumentException($"Cannot map {src.GetType()} to {dst.GetType()} as there is no known derived type mapping", nameof(src));
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::BSubType1 MapToBSubType1(global::ASubType1 source)
    {
        var target = new global::BSubType1();
        target.Value1 = source.Value1;
        target.BaseValueB = source.BaseValueA;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::BSubType2 MapToBSubType2(global::ASubType2 source)
    {
        var target = new global::BSubType2();
        target.Value2 = source.Value2;
        target.BaseValueB = source.BaseValueA;
        return target;
    }
}