//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::System.Linq.IQueryable<global::B> Map(global::System.Linq.IQueryable<global::A> source)
    {
#nullable disable
        return global::System.Linq.Queryable.Select(
            source,
            x => (global::B)(x is global::ASubType1 ? new global::BSubType1()
            {
                Value1 = ((global::ASubType1)x).Value1,
                BaseValueB = ((global::ASubType1)x).BaseValueA,
                StringValue = ((global::ASubType1)x).StringValue,
            } : x is global::ASubType2 ? new global::BSubType2()
            {
                Value2 = ((global::ASubType2)x).Value2,
                BaseValueB = ((global::ASubType2)x).BaseValueA,
                StringValue = ((global::ASubType2)x).StringValue,
            } : default)
        );
#nullable enable
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::B Map(global::A src)
    {
        return src switch
        {
            global::ASubType1 x => MapToBSubType1(x),
            global::ASubType2 x => MapToBSubType2(x),
            _ => throw new global::System.ArgumentException($"Cannot map {src.GetType()} to B as there is no known derived type mapping", nameof(src)),
        };
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::BSubType1 MapToBSubType1(global::ASubType1 source)
    {
        var target = new global::BSubType1();
        target.Value1 = source.Value1;
        target.BaseValueB = source.BaseValueA;
        target.StringValue = source.StringValue;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::BSubType2 MapToBSubType2(global::ASubType2 source)
    {
        var target = new global::BSubType2();
        target.Value2 = source.Value2;
        target.BaseValueB = source.BaseValueA;
        target.StringValue = source.StringValue;
        return target;
    }
}