//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial bool TryMap(object source, global::System.Type targetType, out object result)
    {
        var refHandler = new global::Riok.Mapperly.Abstractions.ReferenceHandling.PreserveReferenceHandler();
        result = default;
        switch (source)
        {
            case global::A x when targetType.IsAssignableFrom(typeof(global::B)):
                result = MapToB1(x, refHandler);
                return true;
            case global::C x when targetType.IsAssignableFrom(typeof(global::D)):
                result = MapToD1(x, refHandler);
                return true;
            default:
                return false;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::B MapToB(global::A source)
    {
        return MapToB1(
            source,
            new global::Riok.Mapperly.Abstractions.ReferenceHandling.PreserveReferenceHandler()
        );
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::D MapToD(global::C source)
    {
        return MapToD1(
            source,
            new global::Riok.Mapperly.Abstractions.ReferenceHandling.PreserveReferenceHandler()
        );
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::B MapToB1(global::A source, global::Riok.Mapperly.Abstractions.ReferenceHandling.IReferenceHandler refHandler)
    {
        if (refHandler.TryGetReference<global::A, global::B>(source, out var existingTargetReference))
            return existingTargetReference;
        var target = new global::B();
        refHandler.SetReference<global::A, global::B>(source, target);
        target.IntValue = source.IntValue;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private global::D MapToD1(global::C source, global::Riok.Mapperly.Abstractions.ReferenceHandling.IReferenceHandler refHandler)
    {
        if (refHandler.TryGetReference<global::C, global::D>(source, out var existingTargetReference))
            return existingTargetReference;
        var target = new global::D();
        refHandler.SetReference<global::C, global::D>(source, target);
        target.IntValue = source.IntValue;
        return target;
    }
}