//HintName: Mapper.g.cs
// <auto-generated />
#nullable enable
public partial class Mapper
{
    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    public partial bool TryMap(object? source, global::System.Type targetType, out object? result)
    {
        result = default;
        switch (source)
        {
            case int x when targetType.IsAssignableFrom(typeof(int)):
                result = MapIntToInt(x);
                return true;
            case string x when targetType.IsAssignableFrom(typeof(int)):
                result = MapStringToInt(x);
                return true;
            case global::A x when targetType.IsAssignableFrom(typeof(global::B)):
                result = MapToB(x);
                return true;
            case global::C x when targetType.IsAssignableFrom(typeof(global::D)):
                result = MapToD(x);
                return true;
            default:
                return false;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial global::B MapToB(global::A source)
    {
        var target = new global::B();
        target.Value = source.Value;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(source))]
    private partial global::D? MapToD(global::C? source)
    {
        if (source == null)
            return default;
        var target = new global::D();
        target.Value2 = source.Value2;
        return target;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial int? MapStringToInt(string? source)
    {
        return source == null ? default(int?) : int.Parse(source);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "0.0.1.0")]
    private partial int? MapIntToInt(int source)
    {
        return (int?)source;
    }
}